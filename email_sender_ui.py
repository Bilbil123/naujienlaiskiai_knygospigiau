# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'email_sender.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                          QLineEdit, QTextEdit, QLabel, QScrollBar, QColorDialog,
                          QComboBox, QFontComboBox, QTabWidget, QGridLayout,
                          QDialog, QDialogButtonBox)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QTextCursor, QColor, QFont


class LinkDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Įterpti nuorodą")
        self.setModal(True)
        
        # Dialog layout
        layout = QVBoxLayout(self)
        
        # URL input
        url_layout = QHBoxLayout()
        url_label = QLabel("Nuoroda:")
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("https://")
        url_layout.addWidget(url_label)
        url_layout.addWidget(self.url_input)
        layout.addLayout(url_layout)
        
        # Buttons
        button_box = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
        
        self.setLayout(layout)
    
    def get_url(self):
        return self.url_input.text().strip()

class Ui_Form(QWidget):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setWindowTitle("Knygospigiau.lt naujienlaiškis ✅")
        self.resize(1000, 800)

        # Main layout
        main_layout = QVBoxLayout()
        self.setLayout(main_layout)

        # Subject
        subject_layout = QHBoxLayout()
        subject_label = QLabel("Laiško antraštė:")
        self.subjectLineEdit = QLineEdit()
        subject_layout.addWidget(subject_label)
        subject_layout.addWidget(self.subjectLineEdit)
        main_layout.addLayout(subject_layout)

        # Font formatting
        font_layout = QHBoxLayout()
        
        # Font family
        self.fontComboBox = QFontComboBox()
        self.fontComboBox.currentFontChanged.connect(self.change_font)
        font_layout.addWidget(self.fontComboBox)
        
        # Font size
        self.fontSizeCombo = QComboBox()
        sizes = ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '26', '28', '36', '48', '72']
        self.fontSizeCombo.addItems(sizes)
        self.fontSizeCombo.setCurrentText('12')
        self.fontSizeCombo.currentTextChanged.connect(self.change_font_size)
        font_layout.addWidget(self.fontSizeCombo)

        # Text alignment buttons
        self.alignLeftButton = QPushButton("⫷")
        self.alignLeftButton.setToolTip("Lygiuoti kairėje")
        self.alignLeftButton.clicked.connect(lambda: self.align_text('left'))
        
        self.alignCenterButton = QPushButton("⫸⫷")
        self.alignCenterButton.setToolTip("Centruoti")
        self.alignCenterButton.clicked.connect(lambda: self.align_text('center'))
        
        self.alignRightButton = QPushButton("⫸")
        self.alignRightButton.setToolTip("Lygiuoti dešinėje")
        self.alignRightButton.clicked.connect(lambda: self.align_text('right'))
        
        font_layout.addWidget(self.alignLeftButton)
        font_layout.addWidget(self.alignCenterButton)
        font_layout.addWidget(self.alignRightButton)
        
        main_layout.addLayout(font_layout)

        # Text formatting buttons
        format_layout = QHBoxLayout()
        
        # Bold button
        self.boldButton = QPushButton("B")
        self.boldButton.setStyleSheet("font-weight: bold;")
        self.boldButton.clicked.connect(self.toggle_bold)
        
        # Italic button
        self.italicButton = QPushButton("I")
        self.italicButton.setStyleSheet("font-style: italic;")
        self.italicButton.clicked.connect(self.toggle_italic)
        
        # Underline button
        self.underlineButton = QPushButton("U")
        self.underlineButton.setStyleSheet("text-decoration: underline;")
        self.underlineButton.clicked.connect(self.toggle_underline)
        
        # Color button
        self.colorButton = QPushButton("Spalva")
        self.colorButton.clicked.connect(self.choose_color)
        
        # Link buttons
        self.linkButton = QPushButton("Įterpti nuorodą")
        self.linkButton.clicked.connect(self.insert_link)
        
        self.removeLinkButton = QPushButton("Pašalinti nuorodą")
        self.removeLinkButton.clicked.connect(self.remove_link)

        format_layout.addWidget(self.boldButton)
        format_layout.addWidget(self.italicButton)
        format_layout.addWidget(self.underlineButton)
        format_layout.addWidget(self.colorButton)
        format_layout.addWidget(self.linkButton)
        format_layout.addWidget(self.removeLinkButton)
        format_layout.addStretch()
        
        main_layout.addLayout(format_layout)

        # Holiday promotions and emoji tabs in horizontal layout
        holiday_emoji_layout = QHBoxLayout()

        # Holiday promotions combo box and insert button
        promotion_layout = QVBoxLayout()
        promotion_label = QLabel("Šventinės akcijos:")
        self.promotionComboBox = QComboBox()
        
        # Dictionary of holiday promotions
        self.holiday_promotions = {
            "🎆 Naujųjų metų akcija": "Pasitikite Naujuosius Metus su knyga! 🎉\nVisiems grožinės literatūros leidiniams -25% nuolaida su kodu NAUJI2024\n",
            "❤️ Valentino dienos akcija": "Meilės dienai - romantiškos knygos su -20% nuolaida! 💝\nNaudokite kodą MEILE214\n",
            "🇱🇹 Vasario 16 akcija": "Švenčiame Lietuvos gimtadienį! Visoms lietuvių autorių knygoms -30% nuolaida.\nKodas: LIETUVA16\n",
            "🐰 Velykų akcija": "Velykinės nuolaidos! 🥚\nVaikų literatūrai ir kulinarijos knygoms -25%\nKodas: VELYKOS2024\n",
            "💐 Mamos dienos akcija": "Brangiai Mamai - ypatinga dovana! Visoms knygoms apie šeimą, sveikatą ir grožį -30%\nKodas: MAMYTE2024\n",
            "👔 Tėvo dienos akcija": "Dovanokite Tėčiui įkvepiančią knygą! Biografijoms ir hobių knygoms -25%\nKodas: TETIS2024\n",
            "🌿 Joninių akcija": "Trumpiausia naktis - ilgiausios nuolaidos! 24 valandas visoms knygoms -24%\nKodas: JONINES24\n",
            "👑 Valstybės dienos akcija": "Švenčiame Lietuvos valstybingumą! Istorijos knygoms -30%\nKodas: MINDAUGAS713\n",
            "🌾 Žolinės akcija": "Žolinės proga - gamtos, sodininkystės ir sveikatingumo knygoms -20%\nKodas: ZOLINE815\n",
            "📚 Mokslo metų akcija": "Ruošiamės į mokyklą! Vadovėliams ir pratyboms -15%\nKodas: MOKYKLA2024\n",
            "🎃 Helovino akcija": "Šiurpioms istorijoms ir mistiniams romanams -20%\nKodas: BOO1031\n",
            "🕯️ Vėlinių akcija": "Prisiminkime... Biografijoms ir atsiminimų knygoms -20%\nKodas: ATMINTIS11\n",
            "🏷️ Juodojo penktadienio akcija": "DIDŽIAUSIOS metų nuolaidos! Visoms knygoms iki -50%\nKodas: BLACK2024\n",
            "🎄 Kalėdinė akcija": "Kalėdinės dovanos su meile! 🎁\nVisoms knygoms -30% nuolaida\nKodas: KALEDOS2024\n"
        }
        
        self.promotionComboBox.addItems(self.holiday_promotions.keys())
        self.insertPromotionButton = QPushButton("Įterpti akciją")
        self.insertPromotionButton.clicked.connect(self.insert_promotion)
        
        promotion_layout.addWidget(promotion_label)
        promotion_layout.addWidget(self.promotionComboBox)
        promotion_layout.addWidget(self.insertPromotionButton)
        
        holiday_emoji_layout.addLayout(promotion_layout)

        # Create tabs for emoji categories
        emoji_tabs = QTabWidget()
        
        # Smileys and People
        smileys_tab = QWidget()
        smileys_layout = QGridLayout()
        smileys_emojis = {
            "😊": "Šypsena",
            "😃": "Plati šypsena",
            "😄": "Šypsena su akimis",
            "😁": "Spinduliuojanti šypsena",
            "😅": "Šypsena su prakaitu",
            "😂": "Ašaros iš juoko",
            "🤣": "Ridenasi iš juoko",
            "😉": "Mirktelėjimas",
            "😍": "Šypsena su širdelėmis",
            "🥰": "Mylinti šypsena",
            "😘": "Bučkis",
            "🤗": "Apkabinimas",
            "🤩": "Žvaigždėtos akys",
            "😎": "Šypsena su akiniais",
            "🥳": "Vakarėlio veidas",
            "👋": "Mojuojanti ranka"
        }
        self.add_emojis_to_grid(smileys_layout, smileys_emojis)
        smileys_tab.setLayout(smileys_layout)
        emoji_tabs.addTab(smileys_tab, "😊 Šypsenėlės")

        # Lithuanian Holidays
        holidays_tab = QWidget()
        holidays_layout = QGridLayout()
        holidays_emojis = {
            # Naujieji Metai
            "🎆": "Fejerverkai",
            "🎇": "Žiežirbos",
            "🎉": "Šventės popetas",
            # Vasario 16
            "🇱🇹": "Lietuvos vėliava",
            "🦁": "Vytis",
            "🗽": "Laisvė",
            # Velykos
            "🥚": "Margutis",
            "🐰": "Velykų kiškis",
            "🌷": "Pavasario gėlė",
            # Motinos diena
            "💐": "Gėlių puokštė",
            "🌺": "Gėlė mamai",
            "💝": "Širdis su kaspinu",
            # Joninės
            "🌿": "Žolynai",
            "🔥": "Joninių laužas",
            "🌙": "Mėnulis",
            # Mindaugo karūnavimas
            "👑": "Karūna",
            "⚔️": "Kardai",
            "🏰": "Pilis",
            # Žolinė
            "🌾": "Javai",
            "🌻": "Saulėgrąža",
            "🍃": "Žalumynai",
            # Vėlinės
            "🕯️": "Žvakė",
            "🌹": "Rožė",
            "✨": "Žvaigždės",
            # Kūčios ir Kalėdos
            "🎄": "Kalėdų eglutė",
            "⭐": "Betliejaus žvaigždė",
            "🎁": "Dovana",
            "🕊️": "Taikos balandis",
            "❄️": "Snaigė",
            "⛄": "Sniego senis"
        }
        self.add_emojis_to_grid(holidays_layout, holidays_emojis)
        holidays_tab.setLayout(holidays_layout)
        emoji_tabs.addTab(holidays_tab, "🇱🇹 Šventės")

        # Books and Reading
        books_tab = QWidget()
        books_layout = QGridLayout()
        books_emojis = {
            "📚": "Knygos",
            "📖": "Atverta knyga",
            "📕": "Raudona knyga",
            "📗": "Žalia knyga",
            "📘": "Mėlyna knyga",
            "📙": "Oranžinė knyga",
            "📓": "Užrašų knygelė",
            "📔": "Dekoruota knyga",
            "📒": "Užrašinė",
            "📑": "Žymekliai",
            "🔖": "Knygos žymeklis",
            "✏️": "Pieštukas",
            "📝": "Užrašai",
            "🎯": "Taikinys",
            "📰": "Laikraštis",
            "🗞️": "Suvyniotas laikraštis"
        }
        self.add_emojis_to_grid(books_layout, books_emojis)
        books_tab.setLayout(books_layout)
        emoji_tabs.addTab(books_tab, "📚 Knygos")

        # Shopping and Gifts
        shopping_tab = QWidget()
        shopping_layout = QGridLayout()
        shopping_emojis = {
            "🎁": "Dovana",
            "🎀": "Kaspinas",
            "🏷️": "Etiketė",
            "💝": "Širdis su kaspinu",
            "💰": "Pinigų maišas",
            "💳": "Kredito kortelė",
            "🛍️": "Pirkinių krepšiai",
            "🎊": "Konfeti",
            "🎉": "Šventės popetas",
            "💌": "Meilės laiškas",
            "📦": "Pakuotė",
            "🎫": "Bilietas",
            "🏪": "Parduotuvė",
            "💴": "Pinigai",
            "💶": "Euro banknotas",
            "🪙": "Moneta"
        }
        self.add_emojis_to_grid(shopping_layout, shopping_emojis)
        shopping_tab.setLayout(shopping_layout)
        emoji_tabs.addTab(shopping_tab, "🛍️ Apsipirkimas")

        # Decorative and Attention
        decorative_tab = QWidget()
        decorative_layout = QGridLayout()
        decorative_emojis = {
            "⭐": "Žvaigždė",
            "🌟": "Šviečianti žvaigždė",
            "✨": "Kibirkštys",
            "💫": "Svaigulys",
            "⚡": "Žaibas",
            "🔥": "Ugnis",
            "❤️": "Raudona širdis",
            "💜": "Violetinė širdis",
            "💙": "Mėlyna širdis",
            "🎨": "Paletė",
            "🎭": "Menas",
            "🎪": "Cirkas",
            "🌈": "Vaivorykštė",
            "🎯": "Taikinys",
            "💡": "Lemputė",
            "📢": "Garsiakalbis"
        }
        self.add_emojis_to_grid(decorative_layout, decorative_emojis)
        decorative_tab.setLayout(decorative_layout)
        emoji_tabs.addTab(decorative_tab, "✨ Dekoracijos")

        # Seasons and Weather
        seasons_tab = QWidget()
        seasons_layout = QGridLayout()
        seasons_emojis = {
            "🌞": "Saulė",
            "🌸": "Gėlė",
            "🍁": "Klevo lapas",
            "❄️": "Snaigė",
            "🌺": "Hibiskas",
            "🌷": "Tulpė",
            "🌹": "Rožė",
            "🌼": "Gėlytė",
            "🍂": "Krintantys lapai",
            "⛄": "Sniego senis",
            "🌤️": "Saulė su debesiu",
            "🌈": "Vaivorykštė",
            "☔": "Lietsargis",
            "🌊": "Banga",
            "🎋": "Bambuko dekoracija",
            "🎍": "Pušies dekoracija"
        }
        self.add_emojis_to_grid(seasons_layout, seasons_emojis)
        seasons_tab.setLayout(seasons_layout)
        emoji_tabs.addTab(seasons_tab, "🌸 Sezonai")

        holiday_emoji_layout.addWidget(emoji_tabs)
        main_layout.addLayout(holiday_emoji_layout)

        # Body
        body_label = QLabel("Laiško tekstas:")
        self.bodyTextEdit = QTextEdit()
        self.bodyTextEdit.setAcceptRichText(True)
        main_layout.addWidget(body_label)
        main_layout.addWidget(self.bodyTextEdit)

        # Quick templates
        templates_layout = QHBoxLayout()
        templates = [
            ("Įterpti pasisveikinimą", "Sveiki,\n\n")
        ]
        
        for label, text in templates:
            btn = QPushButton(label)
            btn.clicked.connect(lambda checked, t=text: self.insert_template(t))
            templates_layout.addWidget(btn)
        
        main_layout.addLayout(templates_layout)

        # Send button
        self.sendButton = QPushButton("Siųsti laiškus")
        main_layout.addWidget(self.sendButton)

        # Log
        log_label = QLabel("Siuntimo logas:")
        self.logTextEdit = QTextEdit()
        self.logTextEdit.setReadOnly(True)
        main_layout.addWidget(log_label)
        main_layout.addWidget(self.logTextEdit)

    def add_emojis_to_grid(self, layout, emojis):
        row = 0
        col = 0
        max_cols = 8
        
        for emoji, tooltip in emojis.items():
            btn = QPushButton(emoji)
            btn.setToolTip(tooltip)
            btn.setStyleSheet("font-size: 16px; padding: 5px;")
            btn.clicked.connect(lambda checked, e=emoji: self.insert_emoji(e))
            layout.addWidget(btn, row, col)
            
            col += 1
            if col >= max_cols:
                col = 0
                row += 1

    def insert_promotion(self):
        selected_promotion = self.promotionComboBox.currentText()
        promotion_text = self.holiday_promotions[selected_promotion]
        cursor = self.bodyTextEdit.textCursor()
        cursor.insertText(promotion_text)

    def toggle_bold(self):
        cursor = self.bodyTextEdit.textCursor()
        format = cursor.charFormat()
        format.setFontWeight(QFont.Bold if format.fontWeight() != QFont.Bold else QFont.Normal)
        cursor.mergeCharFormat(format)
        self.bodyTextEdit.setCurrentCharFormat(format)

    def toggle_italic(self):
        cursor = self.bodyTextEdit.textCursor()
        format = cursor.charFormat()
        format.setFontItalic(not format.fontItalic())
        cursor.mergeCharFormat(format)
        self.bodyTextEdit.setCurrentCharFormat(format)

    def toggle_underline(self):
        cursor = self.bodyTextEdit.textCursor()
        format = cursor.charFormat()
        format.setFontUnderline(not format.fontUnderline())
        cursor.mergeCharFormat(format)
        self.bodyTextEdit.setCurrentCharFormat(format)

    def choose_color(self):
        color = QColorDialog.getColor()
        if color.isValid():
            cursor = self.bodyTextEdit.textCursor()
            format = cursor.charFormat()
            format.setForeground(color)
            cursor.mergeCharFormat(format)
            self.bodyTextEdit.setCurrentCharFormat(format)

    def change_font(self, font):
        cursor = self.bodyTextEdit.textCursor()
        format = cursor.charFormat()
        format.setFont(font)
        cursor.mergeCharFormat(format)
        self.bodyTextEdit.setCurrentCharFormat(format)

    def change_font_size(self, size):
        cursor = self.bodyTextEdit.textCursor()
        format = cursor.charFormat()
        format.setFontPointSize(float(size))
        cursor.mergeCharFormat(format)
        self.bodyTextEdit.setCurrentCharFormat(format)

    def align_text(self, alignment):
        cursor = self.bodyTextEdit.textCursor()
        blockFormat = cursor.blockFormat()
        
        if alignment == 'left':
            blockFormat.setAlignment(Qt.AlignLeft)
        elif alignment == 'center':
            blockFormat.setAlignment(Qt.AlignCenter)
        elif alignment == 'right':
            blockFormat.setAlignment(Qt.AlignRight)
            
        cursor.mergeBlockFormat(blockFormat)
        self.bodyTextEdit.setTextCursor(cursor)

    def insert_link(self):
        cursor = self.bodyTextEdit.textCursor()
        if cursor.hasSelection():
            text = cursor.selectedText()
            dialog = LinkDialog(self)
            if dialog.exec_() == QDialog.Accepted:
                url = dialog.get_url()
                if url:
                    if not url.startswith(('http://', 'https://')):
                        url = 'https://' + url
                    cursor.insertHtml(f'<a href="{url}">{text}</a>')
                    self.bodyTextEdit.setTextCursor(cursor)

    def remove_link(self):
        cursor = self.bodyTextEdit.textCursor()
        if cursor.hasSelection():
            # Get the current character format
            format = cursor.charFormat()
            
            # Remove the anchor property
            format.setAnchor(False)
            format.setAnchorHref("")
            
            # Reset text color to black
            format.setForeground(QColor("black"))
            
            # Remove underline
            format.setFontUnderline(False)
            
            # Apply the modified format to the selected text
            cursor.mergeCharFormat(format)
            self.bodyTextEdit.setTextCursor(cursor)

    def insert_emoji(self, emoji):
        self.bodyTextEdit.insertPlainText(emoji)

    def insert_template(self, template_text):
        cursor = self.bodyTextEdit.textCursor()
        cursor.insertText(template_text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
